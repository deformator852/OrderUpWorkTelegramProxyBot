from aiogram.dispatcher import FSMContext
from create_bot import bot
from aiogram import types, Dispatcher
from keyboards import bot_keyboards
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import re
import asyncpg

# DATABASE data
USER = ''
PASSWORD = ''
HOST = ''
PORT = ''
DATABASE = ''


class ChangeWelcomeMessage(StatesGroup):
    WaitingForNewMessage = State()


class RejectAnswerMessage(StatesGroup):
    WaitingForRejectMessage = State()


class GetWallet(StatesGroup):
    WaitingForWallet = State()


class GetNewProxyLimit(StatesGroup):
    WaitingForNewProxyLimit = State()


class GetNewAccountLimit(StatesGroup):
    WaitingForNewAccountLimit = State()


class GetBalance(StatesGroup):
    WaitingForBalance = State()


class RejectBalanceMessage(StatesGroup):
    WaitingForRejectBalanceMessage = State()


class ChangeActualText(StatesGroup):
    WaitingForNewActualText = State()


class SmsTexting(StatesGroup):
    WaitingForSmsTexting = State()


async def connect_db(user, password, host, port, database):
    connection = await asyncpg.connect(
        user=user,
        password=password,
        host=host,
        port=port,
        database=database
    )
    return connection


# message handlers
async def command_start(message: types.Message):
    try:
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
        admin = await connection.fetchrow(f"SELECT user_id FROM admins WHERE user_id = {message.from_user.id}")
        if not admin:
            result = await connection.fetch(f"SELECT status FROM users WHERE user_id = {message.from_user.id};")
            if result:
                if int(result[0]["status"]) == 2:
                    await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",
                                           reply_markup=bot_keyboards.user_kb)
                if int(result[0]["status"]) == 1:
                    await bot.send_message(message.from_user.id, "üîª–í–∞–º –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ωüîª")
            else:
                await bot.send_message(message.from_user.id, "üîπ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                admins = await connection.fetchrow("SELECT user_id FROM admins")
                for adm in admins:
                    await bot.send_message(str(adm),
                                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID: {message.from_user.id} —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                                           reply_markup=bot_keyboards.admin_choice_kb)

        if admin:
            await bot.send_message(message.from_user.id, "–ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è", reply_markup=bot_keyboards.admin_kb)
    finally:
        await connection.close()


async def change_wellcome_message(message: types.Message):
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    if await connection.fetchrow(f"SELECT user_id FROM admins WHERE user_id = {message.chat.id}"):
        await ChangeWelcomeMessage.WaitingForNewMessage.set()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ")


async def change_actual_text(message: types.Message):
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    if await connection.fetch(f"SELECT user_id FROM admins WHERE user_id = {message.from_user.id}"):
        try:
            current_actual_text = await connection.fetchrow(f"SELECT actual_text FROM actual_text ")
        except:
            pass
        await bot.send_message(message.from_user.id,
                               f"–¢–µ–∫—É—â–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:\n {current_actual_text['actual_text']}")
        await ChangeActualText.WaitingForNewActualText.set()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")


async def sms_texting(message: types.Message, state: FSMContext):
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    if await connection.fetch(f"SELECT user_id FROM admins WHERE user_id = {message.from_user.id}"):
        await SmsTexting.WaitingForSmsTexting.set()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


async def command_get_text(message: types.Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç":
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
        if await connection.fetch(f"SELECT user_id FROM approved_users WHERE user_id = {message.from_user.id}"):
            actual_text = await connection.fetchrow("SELECT actual_text FROM actual_text")
            await bot.send_message(message.from_user.id, "üìù–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ:üìù")
            await bot.send_message(message.from_user.id, actual_text["actual_text"])


async def handle_sms_texting_message(message: types.Message, state: FSMContext):
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    users = await connection.fetchrow(f"SELECT user_id FROM approved_users")
    for user in users:
        await bot.send_message(user, message.text)
    await bot.send_message(message.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!")
    await state.finish()


async def handle_new_welcome_message(message: types.Message, state: FSMContext):
    new_welcome_message = message.text
    try:
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    except Exception as e:
        await bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e}")
        await state.finish()
        await connection.close()
        return
    try:
        await connection.execute("UPDATE wellcome_message SET message = ($1);", new_welcome_message)
    except Exception as e:
        await bot.send_message(message.from_user.id,
                               f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e}")
        await connection.close()
        await state.finish()
        return
    await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    await connection.close()
    await state.finish()


async def handle_new_actual_text(message: types.Message, state: FSMContext):
    new_actual_text = message.text
    try:
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    except:
        await bot.send_message(message.from_user.id,
                               "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
        await connection.close()
        await state.finish()
        return
    try:
        await connection.execute("""
        INSERT INTO actual_text (id, actual_text)
        VALUES ($1, $2)
        ON CONFLICT (id) DO UPDATE
        SET actual_text = $2
    """, 1, new_actual_text)
        await bot.send_message(message.from_user.id, "–ù–æ–≤—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    except:
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç!")
        await connection.close()
        await state.finish()
        return
    await state.finish()

async def handle_reject_join_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    await bot.send_message(user_id, "üî¥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞!")
    await bot.send_message(user_id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: " + message.text)
    await state.finish()


async def handle_wallet_message(message: types.Message, state: FSMContext):
    wallet_message = message.text
    match_wallet_message = re.match(r"\w+\w+\s\w{7,}", wallet_message)
    if match_wallet_message:
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
        try:
            await connection.fetch("UPDATE approved_users SET wallet = $1 WHERE user_id = $2", wallet_message,
                                   message.from_user.id)
            await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∫–æ—à–µ–ª–µ–∫!")
        except:
            await connection.close()

    else:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                               reply_markup=bot_keyboards.user_kb)

    await state.finish()


async def handle_proxy_limit_message(message: types.Message, state: FSMContext):
    new_proxy_limit_message = message.text
    if new_proxy_limit_message.isdigit():
        new_proxy_limit_message = int(new_proxy_limit_message)
        if (new_proxy_limit_message < 1) or (new_proxy_limit_message > 3):
            await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏!")
        else:
            await bot.send_message(message.from_user.id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–∫—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞‚úÖ")
            connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
            admin = await connection.fetchrow(f"SELECT * FROM admins ORDER BY random() LIMIT 1;")
            if admin:
                await bot.send_message(str(admin["user_id"]),
                                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} —Ö–æ—á–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–æ–∫—Å–∏ –¥–æ:{new_proxy_limit_message}",
                                       reply_markup=bot_keyboards.admin_choice_proxy_limit_kb)
    await state.finish()


async def handle_reject_balance_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    await bot.send_message(user_id, "üî¥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞!")
    await bot.send_message(user_id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: " + message.text)
    await state.finish()


async def handle_get_balance_message(message: types.Message, state: FSMContext):
    balance = message.text
    if balance.isdigit():
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
        result = await connection.fetch(
            f"SELECT balance, CASE WHEN wallet IS NULL THEN NULL ELSE wallet END as wallet FROM approved_users WHERE user_id = {message.from_user.id}"
        )
        if int(balance) > result[0]["balance"]:
            await bot.send_message(message.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—á–µ—Ç—É!")
            await state.finish()
            return None
        if result[0]["wallet"] == None:
            await bot.send_message(message.from_user.id, "–ö –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç—É –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ—à–µ–ª–µ–∫!")
            await state.finish()
            return
        if int(balance) == 0:
            await bot.send_message(message.from_user.id, "–°—É–º–∞ —Å–Ω—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 0!")
            await state.finish()
            return None
        await bot.send_message(message.from_user.id,
                               "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        admin = await connection.fetchrow(f"SELECT * FROM admins ORDER BY random() LIMIT 1;")
        if admin:
            await bot.send_message(str(admin["user_id"]),
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –∫–æ—à–µ–ª—å–∫–∞: {result[0]['wallet']} –Ω–∞ —Å—É–º–º—É {balance}",
                                   reply_markup=bot_keyboards.admin_choice_get_balance_kb)
        await state.finish()

    else:
        await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        await state.finish()
    await state.finish()


async def command_my_profile(message: types.Message):
    if message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
        result = await connection.fetch(
            f"SELECT id,balance,proxy_limit FROM approved_users WHERE user_id = {message.from_user.id};")
        if result:
            await bot.send_message(message.from_user.id, f"""
üë®‚Äçüíª–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n
üîëID:{result[0][0]}
üí∞–ë–∞–ª–∞–Ω—Å:{result[0][1]}$
‚ùå–õ–∏–º–∏—Ç –ø—Ä–æ–∫—Å–∏:{result[0][2]}
""", reply_markup=bot_keyboards.my_profile_keyboard)
            await connection.close()
        else:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")


async def command_materials_for_work(message: types.Message):
    if message.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã":
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
        if await connection.fetch(f"SELECT user_id FROM approved_users WHERE user_id = {message.from_user.id}"):
            await bot.send_message(message.from_user.id, "üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=bot_keyboards.material_kb)
        else:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")


# -------------
async def command_raise_proxy_limit(callback: types.CallbackQuery, state: FSMContext):
    await GetNewProxyLimit.WaitingForNewProxyLimit.set()
    await bot.send_message(callback.message.chat.id, "‚úîÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ (–æ—Ç 1 –¥–æ 3): ",
                           reply_markup=bot_keyboards.state_back_button_kb)


async def command_state_back(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥!",
                           reply_markup=bot_keyboards.user_kb)
    await state.finish()


async def command_get_balance(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.message.chat.id, "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")
    await GetBalance.WaitingForBalance.set()


# callback handlers
async def command_join_reject(callback: types.CallbackQuery, state: FSMContext):
    data = callback.message
    text = data["text"]
    match = re.search(r"ID: (\d+)", text)
    user_id = int(match.group(1))
    try:
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    except Exception as e:
        await bot.send_message(callback.message.chat.id,
                               f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: e")
    result = await connection.fetchrow(f"SELECT status FROM users WHERE user_id = '{user_id}'")
    if result:
        if result["status"] == 1:
            await bot.send_message(callback.message.chat.id, "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")
            await connection.close()
            await state.finish()
            return

        elif result["status"] == 2:
            await bot.send_message(callback.message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            await connection.close()
            await state.finish()
            return

    try:
        await connection.fetch(f"INSERT INTO users (user_id,status) VALUES({user_id},1);")
    except Exception as e:
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –±–æ—Ç—É!")
        await connection.close()
        await state.finish()

    await RejectAnswerMessage.WaitingForRejectMessage.set()
    await state.update_data(user_id=user_id)
    await bot.send_message(callback.message.chat.id, f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ")
    await connection.close()


async def command_join_approve(callback: types.CallbackQuery):
    data = callback.message
    text = data["text"]
    match = re.search(r"ID: (\d+)", text)
    user_id = int(match.group(1))
    try:
        connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    except Exception as e:
        await bot.send_message(callback.message.chat.id,
                               f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: e")
        await bot.send_message(user_id,
                               "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ!")
        return

    try:
        check = await connection.fetch(f"SELECT status FROM users WHERE user_id = {user_id}")
        if check:
            if check[0]["status"] == 2:
                await bot.send_message(callback.message.chat.id, "–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                await connection.close()
                return
            elif check[0]["status"] == 1:
                await bot.send_message(callback.message.chat.id, "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")
                await connection.close()
                return
    except Exception as e:
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –±–¥")
        await connection.close()
        return
    try:
        await connection.fetch(
            f"INSERT INTO users (user_id,status) VALUES({user_id},2);")
    except Exception as e:
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ —Å –∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö,–∞–∫–∫–∞—É–Ω—Ç –Ω–µ–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
        await bot.send_message(user_id,
                               "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ!")
        await connection.close()
        return

    try:
        await connection.fetch(
            f"INSERT INTO approved_users (user_id,proxy_limit,balance,account_limit,proxy_count,account_count) VALUES({user_id},1,0,3,0,0);")
        wellcome_message_row = await connection.fetchrow("SELECT wellcome_message FROM wellcome_message")
        wellcome_message = wellcome_message_row[0]["message"]
        await bot.send_message(user_id, "üü¢ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        await bot.send_message(user_id, wellcome_message)
        await bot.send_message(user_id, "üîë", reply_markup=bot_keyboards.user_kb)

    except Exception as e:
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ —Å –∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö,–∞–∫–∫–∞—É–Ω—Ç –Ω–µ–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω")
        await connection.fetch(
            f"DELETE FROM users WHERE user_id = {user_id}")
        await connection.close()
        return

    await connection.close()


async def command_bind_wallet(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.message.chat.id, """
üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—à–µ–ª—ë–∫ TRC-20 –≤ —Ñ–æ—Ä–º–∞—Ç–µ 
–º–æ–Ω–µ—Ç–∞ - –∞–¥—Ä–µ—Å
–ü—Ä–∏–º–µ—Ä: TRX  TYMSMUMq8p12345678Q3PihXmkLj4M1234
    """, reply_markup=bot_keyboards.state_back_button_kb)
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    result = await connection.fetch(
        f"SELECT wallet, CASE WHEN wallet IS NOT NULL THEN 'notnull' ELSE 'isnull' END FROM approved_users WHERE user_id = {callback.from_user.id}")
    await connection.close()
    if result[0]["wallet"] != None:
        await bot.send_message(callback.from_user.id, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫: {result[0][0]}")
    await GetWallet.WaitingForWallet.set()


async def command_proxy_approve(callback: types.CallbackQuery):
    new_proxy_limit_message = callback.message.text
    match_id = re.search(r"ID: (\d+)", new_proxy_limit_message)
    user_id = int(match_id.group(1))
    limit = new_proxy_limit_message[-1]
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    await connection.fetch(f"UPDATE approved_users SET proxy_limit = {limit} WHERE user_id = {user_id};")
    await connection.close()
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–∫—Å–∏ –¥–æ {limit} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! ‚úÖ")


async def command_proxy_reject(callback: types.CallbackQuery):
    new_proxy_limit_message = callback.message.text
    match_id = re.search(r"ID: (\d+)", new_proxy_limit_message)
    user_id = int(match_id.group(1))
    limit = new_proxy_limit_message[-1]
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–∫c–∏ –¥–æ {limit} –±—ã–ª–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞ ‚ùå")


async def command_account_approve(callback: types.CallbackQuery):
    new_account_limit_message = callback.message.text
    match_id = re.search(r"ID: (\d+)", new_account_limit_message)
    user_id = int(match_id.group(1))
    limit = new_account_limit_message[-1]
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ {limit} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!‚úÖ")
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    await connection.fetch(f"UPDATE approved_users SET account_limit = {limit} WHERE user_id = {user_id};")
    await connection.close()


async def command_account_reject(callback: types.CallbackQuery):
    new_account_limit_message = callback.message.text
    match_id = re.search(r"ID: (\d+)", new_account_limit_message)
    user_id = int(match_id.group(1))
    limit = new_account_limit_message[-1]
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ {limit} –±—ã–ª–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞ ‚ùå")


async def command_balance_approve(callback: types.CallbackQuery):
    balance_message = callback.message.text
    match_id = re.search(r"ID: (\d+)", balance_message)
    user_id = int(match_id.group(1))
    await bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–Ω—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–æ —Å—á—ë—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!")
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    database_balance = await connection.fetch(f"SELECT balance FROM approved_users WHERE user_id = {user_id};")
    match_balance = re.search(r'—Å—É–º–º—É (\d+)', balance_message)
    new_balance = database_balance[0]["balance"] - int(match_balance.group(1))
    await connection.fetch(f"UPDATE approved_users SET balance = {new_balance} WHERE user_id = {user_id};")
    await connection.close()


async def command_balance_reject(callback: types.CallbackQuery, state: FSMContext):
    balance_message = callback.message.text
    match_id = re.search(r"ID: (\d+)", balance_message)
    user_id = int(match_id.group(1))
    connection = await connect_db(user=USER, password=PASSWORD, host=HOST, port=PORT, database=DATABASE)
    if await connection.fetch(f"SELECT user_id FROM admins WHERE user_id = {callback.message.chat.id}"):
        await RejectBalanceMessage.WaitingForRejectBalanceMessage.set()
        await state.update_data(user_id=user_id)
        await bot.send_message(callback.message.chat.id, f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ")


async def command_get_proxy(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, "üåè–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∫—Å–∏:",
                           reply_markup=bot_keyboards.choice_country_proxy_kb)


def register_message_handlers(dp: Dispatcher):
    dp.register_message_handler(command_start, commands="start")
    dp.register_message_handler(change_wellcome_message, commands="change_wellcome_message", state=None)
    dp.register_message_handler(handle_new_welcome_message, state=ChangeWelcomeMessage.WaitingForNewMessage)
    dp.register_message_handler(handle_reject_join_message, state=RejectAnswerMessage.WaitingForRejectMessage)
    dp.register_message_handler(handle_wallet_message, state=GetWallet.WaitingForWallet)
    dp.register_message_handler(handle_proxy_limit_message, state=GetNewProxyLimit.WaitingForNewProxyLimit)
    dp.register_message_handler(handle_sms_texting_message, state=SmsTexting.WaitingForSmsTexting)
    dp.register_message_handler(handle_new_actual_text, state=ChangeActualText.WaitingForNewActualText)
    dp.register_message_handler(command_my_profile, Text(equals="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    dp.register_message_handler(command_materials_for_work, Text(equals="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã"))
    dp.register_message_handler(handle_get_balance_message, state=GetBalance.WaitingForBalance)
    dp.register_message_handler(handle_reject_balance_message,
                                state=RejectBalanceMessage.WaitingForRejectBalanceMessage)
    dp.register_message_handler(command_get_text, Text(equals="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"))
    dp.register_message_handler(change_actual_text, commands="change_actual_text")
    dp.register_message_handler(sms_texting, commands="sms_texting", state=None)


def register_callback_query_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(command_join_approve,
                                       lambda callback_query: callback_query.data == "command_join_approve", state=None)
    dp.register_callback_query_handler(command_join_reject,
                                       lambda callback_query: callback_query.data == "command_join_reject",
                                       state=None)
    dp.register_callback_query_handler(command_bind_wallet,
                                       lambda callback_query: callback_query.data == "command_bind_wallet", state=None)
    dp.register_callback_query_handler(command_proxy_approve,
                                       lambda callback_query: callback_query.data == "command_proxy_approve")
    dp.register_callback_query_handler(command_proxy_reject,
                                       lambda callback_query: callback_query.data == "command_proxy_reject")
    dp.register_callback_query_handler(command_raise_proxy_limit,
                                       lambda callback_query: callback_query.data == "command_raise_proxy_limit",
                                       state=None)
    dp.register_callback_query_handler(command_account_approve,
                                       lambda callback_query: callback_query.data == "command_account_approve")
    dp.register_callback_query_handler(command_account_reject,
                                       lambda callback_query: callback_query.data == "command_account_reject")
    dp.register_callback_query_handler(command_get_balance,
                                       lambda callback_query: callback_query.data == "command_get_balance", state=None)
    dp.register_callback_query_handler(command_balance_approve,
                                       lambda callback_query: callback_query.data == "command_balance_approve")
    dp.register_callback_query_handler(command_balance_reject,
                                       lambda callback_query: callback_query.data == "command_balance_reject",
                                       state=None)
    dp.register_callback_query_handler(command_get_proxy,
                                       lambda callback_query: callback_query.data == "command_get_proxy")
    dp.register_callback_query_handler(command_state_back,
                                       lambda callback_query: callback_query.data == "command_state_back",
                                       state="*")
